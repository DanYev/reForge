
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/go_protein.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_go_protein.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_go_protein.py:


Simple CG Protein
=================

Simple Go-Martini setup

Requirements:
    - GROMACS
    - Python 3.x

Author: DY

.. GENERATED FROM PYTHON SOURCE LINES 14-19

.. code-block:: Python


    import os
    from reforge import cli
    from reforge.mdsystem.gmxmd import GmxSystem, GmxRun








.. GENERATED FROM PYTHON SOURCE LINES 20-23

First, we need to initialize an instance of *GmxSystem*, which will handle path management
and the necessary files. This instance uses the parent directory *'systems'* (relative to the current
directory) and the root directory *'test'* within *'systems'* for the system.

.. GENERATED FROM PYTHON SOURCE LINES 23-25

.. code-block:: Python

    mdsys = GmxSystem(sysdir='systems', sysname='test')








.. GENERATED FROM PYTHON SOURCE LINES 26-27

Next, prepare the necessary files by calling *prepare_files()*.

.. GENERATED FROM PYTHON SOURCE LINES 27-33

.. code-block:: Python

    mdsys.prepare_files()

    # List the files in the system's root directory:
    for f in mdsys.root.iterdir():
        print(f)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/mywsl/cgtools/docs/examples/systems/test/water.gro
    /home/mywsl/cgtools/docs/examples/systems/test/system.top
    /home/mywsl/cgtools/docs/examples/systems/test/cgpdb
    /home/mywsl/cgtools/docs/examples/systems/test/mdp
    /home/mywsl/cgtools/docs/examples/systems/test/map
    /home/mywsl/cgtools/docs/examples/systems/test/nucleotides
    /home/mywsl/cgtools/docs/examples/systems/test/png
    /home/mywsl/cgtools/docs/examples/systems/test/protein.top
    /home/mywsl/cgtools/docs/examples/systems/test/proteins
    /home/mywsl/cgtools/docs/examples/systems/test/1btl.pdb
    /home/mywsl/cgtools/docs/examples/systems/test/topol
    /home/mywsl/cgtools/docs/examples/systems/test/solute.pdb
    /home/mywsl/cgtools/docs/examples/systems/test/atommass.dat
    /home/mywsl/cgtools/docs/examples/systems/test/inpdb.pdb
    /home/mywsl/cgtools/docs/examples/systems/test/data




.. GENERATED FROM PYTHON SOURCE LINES 34-36

Sort chains and atoms in the input PDB file to avoid future conflicts.
This creates a file (named *inpdb.pdb*) that can later be accessed as *mdsys.inpdb*.

.. GENERATED FROM PYTHON SOURCE LINES 36-40

.. code-block:: Python

    in_pdb = mdsys.root / "1btl.pdb"  # can be relative to *mdsys.root* or an absolute path
    mdsys.sort_input_pdb(in_pdb)
    print(mdsys.inpdb)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Chains and atoms sorted, renamed and saved to /home/mywsl/cgtools/docs/examples/systems/test/inpdb.pdb
    /home/mywsl/cgtools/docs/examples/systems/test/inpdb.pdb




.. GENERATED FROM PYTHON SOURCE LINES 41-43

Although there are multiple chains in this case, the *split_chains()* method
splits *mdsys.inpdb* into separate chains and moves protein and RNA/DNA files to their respective directories.

.. GENERATED FROM PYTHON SOURCE LINES 43-45

.. code-block:: Python

    mdsys.split_chains()








.. GENERATED FROM PYTHON SOURCE LINES 46-49

Coarse-grain the proteins using *martinize2* (by Martini) with the following parameters:
    *go_eps* = 10.0, *go_low* = 0.3, *go_up* = 1.0,
    *p* = "backbone", *pf* = 500, *append* = False

.. GENERATED FROM PYTHON SOURCE LINES 49-51

.. code-block:: Python

    mdsys.martinize_proteins_go(go_eps=10.0, go_low=0.3, go_up=1.0, p="backbone", pf=500, append=False)








.. GENERATED FROM PYTHON SOURCE LINES 52-55

Inspect the generated topology files. The topology should include the main protein topology file
*chain_A.itp* as well as the virtual sites parameters for the GO model:
*go_atomtypes.itp* and *go_nbparams.itp*.

.. GENERATED FROM PYTHON SOURCE LINES 55-58

.. code-block:: Python

    for f in mdsys.topdir.iterdir():
        print(f)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/mywsl/cgtools/docs/examples/systems/test/topol/martini_RNA.itp
    /home/mywsl/cgtools/docs/examples/systems/test/topol/martini_v3.0.0_rna.itp
    /home/mywsl/cgtools/docs/examples/systems/test/topol/martini_v3.0.0_ions_v1.itp
    /home/mywsl/cgtools/docs/examples/systems/test/topol/chain_A.itp
    /home/mywsl/cgtools/docs/examples/systems/test/topol/go_atomtypes.itp
    /home/mywsl/cgtools/docs/examples/systems/test/topol/martini_ions.itp
    /home/mywsl/cgtools/docs/examples/systems/test/topol/go_nbparams.itp
    /home/mywsl/cgtools/docs/examples/systems/test/topol/martini_v3.0.0_solvents_v1.itp
    /home/mywsl/cgtools/docs/examples/systems/test/topol/martini_v3.0.0_phospholipids_v1.itp
    /home/mywsl/cgtools/docs/examples/systems/test/topol/martini_v3.0.0.itp
    /home/mywsl/cgtools/docs/examples/systems/test/topol/martini_v3.0.0_small_molecules_v2.itp
    /home/mywsl/cgtools/docs/examples/systems/test/topol/martini_v3.0.0_nucleobases_v1.itp
    /home/mywsl/cgtools/docs/examples/systems/test/topol/martini_v3.0.0_sugars_v2.itp




.. GENERATED FROM PYTHON SOURCE LINES 59-60

Check the coarse-grained structure in the *cgdir* directory.

.. GENERATED FROM PYTHON SOURCE LINES 60-63

.. code-block:: Python

    for f in mdsys.cgdir.iterdir():
        print(f)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/mywsl/cgtools/docs/examples/systems/test/cgpdb/chain_A.pdb




.. GENERATED FROM PYTHON SOURCE LINES 64-68

Combine all topology and structure files.
The method *make_cg_topology()* uses GROMACS's *gmx pdb2gmx* module to create the simulation box.
(See online documentation for details.)
It returns the CG topology as *mdsys.systop* (i.e. "mdsys.top").

.. GENERATED FROM PYTHON SOURCE LINES 68-74

.. code-block:: Python

    mdsys.make_cg_topology()

    # The method *make_cg_structure()* creates the CG structure.
    # Here, *bt* = 'dodecahedron' and *d* = '1.2'; it returns *mdsys.solupdb* (i.e. "solute.pdb").
    mdsys.make_cg_structure(bt='dodecahedron', d='1.2')








.. GENERATED FROM PYTHON SOURCE LINES 75-76

Add solvent and neutralize the system's charge.

.. GENERATED FROM PYTHON SOURCE LINES 76-80

.. code-block:: Python

    solvent = mdsys.root / "water.gro"
    mdsys.solvate(cp=mdsys.solupdb, cs=solvent)
    mdsys.add_bulk_ions(conc=0.15, pname="NA", nname="CL")



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/home/mywsl/cgtools/docs/examples/go_protein.py", line 77, in <module>
        mdsys.solvate(cp=mdsys.solupdb, cs=solvent)
      File "/home/mywsl/cgtools/reforge/mdsystem/gmxmd.py", line 248, in solvate
        self.gmx("solvate", p=self.systop, o=self.syspdb, **kwargs)
      File "/home/mywsl/cgtools/reforge/mdsystem/gmxmd.py", line 83, in gmx
        cli.gmx(command, clinput=clinput, **kwargs)
      File "/home/mywsl/cgtools/reforge/cli.py", line 184, in gmx
        sp.run(command.split(), input=clinput, text=cltext, check=True)
      File "/home/mywsl/miniconda3/envs/reforge/lib/python3.12/subprocess.py", line 550, in run
        with Popen(*popenargs, **kwargs) as process:
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
      File "/home/mywsl/miniconda3/envs/reforge/lib/python3.12/subprocess.py", line 1028, in __init__
        self._execute_child(args, executable, preexec_fn, close_fds,
      File "/home/mywsl/miniconda3/envs/reforge/lib/python3.12/subprocess.py", line 1963, in _execute_child
        raise child_exception_type(errno_num, err_msg, err_filename)
    FileNotFoundError: [Errno 2] No such file or directory: 'gmx_mpi'




.. GENERATED FROM PYTHON SOURCE LINES 81-84

To work with GROMACS selections, generate an index file (*mdsys.sysndx*).
The default group order is: 1. *System*, 2. *Solute*, 3. *Backbone*, 4. *Solvent*, 5. *Not Water*, and then 6+ individual chains.
Custom groups can be added using the method *AtomList.write_to_ndx()*.

.. GENERATED FROM PYTHON SOURCE LINES 84-86

.. code-block:: Python

    mdsys.make_system_ndx(backbone_atoms=["BB"])


.. GENERATED FROM PYTHON SOURCE LINES 87-91

One of the convenient features of *GmxSystem* is the ability to execute GROMACS commands
directly from your Python script using *GmxSystem.gmx*. This runs the command in the system's working directory.
For example, to view the system (using VMD or PyMOL), you must first correct the generated box for
periodic boundary conditions. This is done with GROMACS's *trjconv* module:

.. GENERATED FROM PYTHON SOURCE LINES 91-92

.. code-block:: Python

    mdsys.gmx("trjconv", clinput='0\n', s=mdsys.syspdb, f=mdsys.syspdb, pbc='atom', ur='compact', o="viz.pdb")


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 30.693 seconds)


.. _sphx_glr_download_auto_examples_go_protein.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: go_protein.ipynb <go_protein.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: go_protein.py <go_protein.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: go_protein.zip <go_protein.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
